[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "maketables"
version = "0.1.0"
authors = [
    {name = "Dirk Sliwka", email = "dirks_email@uni.de"},
]
description = "A Python package for creating publication-ready tables from statistical models and descriptive statistics"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }

dependencies = [
    "numpy>=1.20.0",
    "pandas>=1.3.0",
    "great-tables>=0.2.0",
    "tabulate>=0.9.0",
    "python-docx>=0.8.11",
    "ipython>=7.0.0",
]


[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "flake8>=5.0",
    "mypy>=1.0",
    "pre-commit>=4.3.0,<5",
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
    "pyfixest>=0.13.0",
    "statsmodels>=0.13.0",
    "ipykernel>=6.0.0,<7",
    "nbconvert>=7.0.0",
    "pylatex>=1.4.2,<2",
    "pyyaml>=6.0.0,<7",
]

[tool.pixi.feature.dev.dependencies]
quarto = ">=1.8.25,<2"

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64", "osx-64", "win-64"]

[tool.pixi.pypi-dependencies]
maketables = { path = ".", editable = true }

[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }

[tool.pixi.feature.dev.tasks]
check = "pre-commit run --all-files"

[tool.pixi.feature.docs.tasks]
run-all-notebooks = "jupyter nbconvert --execute --to notebook --inplace DTable.ipynb ETable.ipynb DocxTables.ipynb LatexTables.ipynb WritingPapers.ipynb getting-started.ipynb"
docs-preview = "quarto preview"
docs-install-tex = "quarto install tinytex"

[tool.ruff]
line-length = 88
fix = true

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# docs: https://docs.astral.sh/ruff/rules/
select = [
  "B",   # bugbear
  "F",   # Pyflakes
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "I",   # isort
  "D",   # flake8-docstrings
  "UP",  # pyupgrade
  "SIM", # flake8-simplify
  "RUF", # ruff,
  "TRY", # tryceratops
]

ignore = [
  # do not enable if formatting
  # docs: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  "B028",   # No explicit `stacklevel` keyword argument found
  "B904",   # Better exception handling
  "W191",   # tab indentation
  "E111",   # indentation
  "E114",   # indentation
  "E117",   # over indented
  "D206",   # indent with spaces
  "D300",   # triple single quotes
  "E501",   # line length regulated by formatter
  "D105",   # missing docstring in magic method
  "D100",   # missing docstring in public module
  "D104",   # missing docstring in public package
  "SIM110", # Use all instead of `for` loop
  "TRY003", # Avoid specifying long messages outside the exception class
  "D205",   # 1 blank line required between summary line and description
  "W505",   # Doc line too long
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D100", "D103"]
"pyfixest/multcomp.py" = ["D103"]
"pyfixest/summarize.py" = ["D103"]
"pyfixest/visualize.py" = ["D103"]
"scripts/*.py" = ["D103"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 88

[tool.mypy]

[[tool.mypy.overrides]]
module = [
  "pandas.*",
  "numpy.*",
  "scipy.*",
  "numba.*",
  "lets_plot.*",
  "formulaic.*",
  "wildboottest.*",
  "tabulate.*",
  "joblib.*",
  "narwhals.*",
  "tqdm.*",
]
ignore_missing_imports = true
